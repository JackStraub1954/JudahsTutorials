package com.acmemail.judah.cartesian_plane.test_utils;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import com.acmemail.judah.cartesian_plane.CPConstants;

public class LinePropertySetInitializerGenerator
{
    private static final String     newLine     = System.lineSeparator();
    private static final String     tab1        = "    ";
    private static final String     tab2        = tab1 + tab1;
    private static final String     className   =
        "LinePropertySetInitializer";
    private static final String     fileName    = className + ".java";
    private static final File       sourceFile  = new File( fileName );
    private static final String[]   prefixes    =
    {
        "TIC_MAJOR",
        "TIC_MINOR",
        "GRID_LINE",
        "AXIS"
    };
    private static final List<String>   procLines   = new ArrayList<>();
    
    private static final String     suffix      = "_PN";
    
    private static final Field[]    allFields   =
        CPConstants.class.getFields();
    
    private static PrintStream    filePrinter = null;
    public static void main( String[] args )
    {
        try ( PrintStream printer = new PrintStream( sourceFile ) )
        {
            filePrinter = printer;
            float   next    = 1;
            int     color   = 100;
            printHead();
            for ( String prefix : prefixes )
            {
                filePrinter.println( tab1 + "// " + prefix );
                processPrefix( prefix, next, String.valueOf( color ) );
                next += 1;
                color += 10;
            }
            filePrinter.println();
            printProcLines();
            filePrinter.println( "}" );
        }
        catch ( IOException exc )
        {
            exc.printStackTrace();
            System.exit( 1 );
        }
        System.out.println( "done" );
    }
    
    private static void printHead() throws IOException
    {
        String  comment     =
            "// This file generated by LinePropertySetInitializerGenerator";
        String  packageName =
            "com.acmemail.judah.cartesian_plane.test_utils;";
        filePrinter.println( comment );
        filePrinter.println( "package " + packageName );
        filePrinter.println( "import static com.acmemail.judah.cartesian_plane.CPConstants.*;" );
        filePrinter.println( "public class " + className  );
        filePrinter.println( "{"  );
    }

    private static void processPrefix( String prefix, float num, String color )
        throws IOException
    {
        float   nextNum = num;
        for ( Field field : allFields )
        {
            String  name   = field.getName();
            if ( name.startsWith( prefix ) && name.endsWith( suffix ) )
            {
                StringBuilder   bldr    = new StringBuilder( tab1 );
                int     identLen    = name.length() - suffix.length();
                String  ident       = name.substring( 0, identLen );
                String  nextNumStr  = String.format( "%.1f", nextNum );
                String  val         = null;
                if ( ident.contains( "COLOR" ) )
                    val = String.valueOf( color );
                else if ( ident.contains( "DRAW" ) )
                    val = "true";
                else
                    val = nextNumStr;
                bldr.append( "public static final String ")
                    .append( ident ).append( " = " )
                    .append("\"" ).append( val ).append( "\";");
                filePrinter.println( bldr );
                
                bldr = new StringBuilder();
                bldr.append( tab2 )
                    .append( "System.setProperty( ")
                    .append( name )
                    .append( ", " )
                    .append( ident ).append( " );" );
                procLines.add( bldr.toString() );
                
                nextNum += .1f;
            }
        }
    }
    
    private static void printProcLines()
    {
        String  method  =
            tab1 
            + "public static void initProperties()"
            + newLine + tab1
            + "{";
        filePrinter.println( method );
        for ( String line : procLines )
            filePrinter.println( line );
        filePrinter.println( tab1 + "}" );
    }
}
