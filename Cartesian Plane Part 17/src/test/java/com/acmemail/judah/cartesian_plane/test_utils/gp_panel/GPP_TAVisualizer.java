package com.acmemail.judah.cartesian_plane.test_utils.gp_panel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.stream.Stream;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

import com.acmemail.judah.cartesian_plane.components.GraphPropertySet;
import com.acmemail.judah.cartesian_plane.components.PButtonGroup;
import com.acmemail.judah.cartesian_plane.components.PRadioButton;
import com.acmemail.judah.cartesian_plane.graphics_utils.ComponentException;
import com.acmemail.judah.cartesian_plane.graphics_utils.GUIUtils;
import com.acmemail.judah.cartesian_plane.test_utils.Utils;

/**
 * Application for examining
 * the test data
 * stored in a file
 * generated by the {@linkplain GPP_TA} application.
 * The stored data
 * is compared to an actual image
 * rendered in a {@linkplain GPPTestDialog}.
 * The actual image is constructed
 * using the data from the {@linkplain GPPTestDataInitializer}.
 * 
 * @author Jack Straub
 * 
 * @see GPPTestDataInitializer
 * @see GPP_TA
 * @see GPPTestDialog

 */
public class GPP_TAVisualizer
{
    /** Path to the storage location of all test data files. */
    private static final File       gppPath     = 
        Utils.getTestDataDir( GPP_TA.GPP_DIR );
    /** Array containing all data files. */
    private final File[]            allFiles    = 
        gppPath.listFiles( f -> f.getName().endsWith( ".ser" ) );

    /** 
     * The feedback dialog 
     * which displays the expected and actual images. 
     */
    private FBDialog          fbDialog;
    /** The test dialog which is used to generate the actual image. */
    private GPPTestDialog     testDialog;
    
    /** 
     * Contains the option buttons which allow the operator
     * to select a file to display.
     */
    private final PButtonGroup<GPP_TADetail>    
        buttonGroup                             = new PButtonGroup<>();
    
    /**
     * Application entry point.
     * 
     * @param args  command line arguments; not used
     */
    public static void main( String[] args )
    {
        // Workaround for issue #?????
        // "Test will not work when font size is allowed to change,
        // or is too big.
        GPPTestDataInitializer.setFixedFontSize( GPP_TA.fixedFontSize );
        new GPPTestDataInitializer();
        GPP_TAVisualizer        app     = new GPP_TAVisualizer();
        GUIUtils.schedEDTAndWait( () -> app.showGUI() );
        
        // Must build GUI with invokeAnd wait, then select button
        // with invokeLater...
        // Method showGUI must execute buttonGroup.selectIndex( 1 )...
        SwingUtilities.invokeLater( () -> {
            app.buttonGroup.selectIndex( 0 );
        });
    }
    
    /**
     * Creates and shows the GUI.
     */
    public void showGUI()
    {
        final int   frameXco    = 150;
        final int   frameYco    = 50;
        testDialog = GPPTestDialog.getDialog();
        testDialog.setTitle( "Actual Image Generator" );
        
        JFrame      frame   = new JFrame();
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        JPanel      pane    = new JPanel( new BorderLayout() );

        pane.add( getCenterPanel(), BorderLayout.CENTER );
        pane.add( getControlPanel(), BorderLayout.SOUTH );
        frame.setContentPane( pane );
        frame.pack();
        
        fbDialog  = new FBDialog( frame );
        testDialog.setDialogVisible( true );
        fbDialog.setVisible( true );
        
        int nextXco = frameXco;
        frame.setLocation( nextXco, frameYco );
        
        nextXco += frame.getWidth();
        fbDialog.setLocation( nextXco, frameYco );
        
        // Must select a button to give fb panel a size before
        // calculating position of testDialog...
        // ... see also note, above, re: "showGUI must execute..."
        int inx = buttonGroup.getButtonCount() > 1 ? 1 : 0;
        buttonGroup.selectIndex( inx );
        nextXco += fbDialog.getWidth();
        testDialog.setLocation( nextXco, frameYco );

        frame.setVisible( true );
    }
    
    /**
     * Creates the center panel 
     * of the application's frame.
     * This is the panel
     * that allows the operator
     * to choose the file
     * to display.
     * 
     * @return  the application frame's center panel
     */
    private JPanel getCenterPanel()
    {
        JPanel      panel   = new JPanel();
        BoxLayout   layout  = new BoxLayout( panel, BoxLayout.Y_AXIS );
        Border      border  =
            BorderFactory.createTitledBorder( "Select Image" );
        panel.setBorder( border );
        panel.setLayout( layout );
        
        Stream.of( allFiles )
            .map( this::getRadioButton )
            .peek( b -> b.addActionListener( this::selectAction ) )
            .peek( buttonGroup::add )
            .forEach( panel::add );
        
        return panel;
    }
    
    /**
     * Creates the control panel
     * for the application's frame.
     * This just contains a button
     * that allows the operator
     * to dismiss the application.
     * 
     * @return  control panel for the application's frame
     */
    private JPanel getControlPanel()
    {
        JPanel  panel   = new JPanel();
        JButton exit    = new JButton( "Exit" );
        exit.addActionListener( e -> System.exit( 0 ) );
        panel.add( exit );
        return panel;
    }
    
    /**
     * Action that is executed
     * when the operator selected a button
     * in the application's frame.
     * Operates as follows:
     * <ol>
     * <li>Reads the file associated with the button.</li>
     * <li>
     *      From the test dialog, 
     *      selects the option
     *      indicated by the file.
     *  </li>
     *  <li>
     *      From the test dialog, 
     *      obtains and displays the "actual image".</li>
     *  <li>
     *      Compares the expected and actual images
     *      and display the result.
     *  </li>
     * </ol>
     * @param evt
     */
    private void selectAction( ActionEvent evt )
    {
        Object  source          = evt.getSource();
        if ( !(source instanceof PRadioButton<?>) )
            throw new ComponentException( "Invalid selection" );
        
        PRadioButton<?> button  = (PRadioButton<?>)source;
        Object          obj     = button.get();
        if ( !(obj instanceof GPP_TADetail) )
        {
            String  exp     = "GPPDetail";
            String  act     = obj.getClass().getSimpleName();
            String  msg     = "Expected: " + exp + ", Actual: " + act;
            throw new ComponentException( msg );            
        }
        GPP_TADetail    detail  = (GPP_TADetail)obj;
        Class<?>        gppType = detail.getGPPType();
        PRadioButton<GraphPropertySet>   target  =
            testDialog.getRBList().stream()
                .filter( b -> b.get().getClass() == gppType )
                .findFirst().orElse( null );
        if ( target == null )
            throw new ComponentException( "PRadioButton not found" );
        testDialog.doClick( target );
        
        BufferedImage   actImage    = testDialog.getPanelImage();
        BufferedImage   expImage    = detail.getBufferedImage();
        boolean         areEqual    = Utils.equals( actImage, expImage );
        String          status      = areEqual ? "Pass" : "Fail";
        fbDialog.showActualImage( actImage );
        fbDialog.showExpectedImage( expImage );
        fbDialog.showStatus( status );
    }

    /**
     * Given a file containing 
     * the test data for a particular configuration
     * ("axes", "gridlines" etc.)
     * creates the corresponding radio button
     * for the application's frame.
     * 
     * @param file  the given file
     * 
     * @return  
     *      a radio button containing the data
     *      from the given file
     */
    private PRadioButton<GPP_TADetail>
    getRadioButton( File file )
    {
        GPP_TADetail    detail  = getDetail( file );
        String          text    = file.getName();
        PRadioButton<GPP_TADetail>  button  =
            new PRadioButton<>( detail, text );
        return button;
    }
    
    /**
     * Reads the detail object from the given file.
     * 
     * @param file  the given file
     * 
     * @return  the detail object obtained from the given file
     */
    private GPP_TADetail getDetail( File file )
    {
        GPP_TADetail    detail  = null;
        try (
            FileInputStream fStream = new FileInputStream( file );
            ObjectInputStream oStream = new ObjectInputStream( fStream );
        )
        {
            Object  obj = oStream.readObject();
            if ( !(obj instanceof GPP_TADetail) )
            {
                String  actualName  = obj.getClass().getSimpleName();
                String  message     =
                    "Expected type: int[][], actual type: " + actualName;
                throw new ClassNotFoundException( message );
            }
            detail = (GPP_TADetail)obj;
        }
        catch ( IOException | ClassNotFoundException exc )
        {
            exc.printStackTrace();
            System.exit( 1 );
        }
        
        return detail;
    }
    
    /**
     * Feedback dialog,
     * for displaying the image read from a file
     * (the "expected image"),
     * the corresponding graphic obtained
     * from the test dialog
     * (the "actual image"),
     * and the result of comparing the two
     * for equality.
     * 
     * @author Jack Straub
     */
    @SuppressWarnings("serial")
    private static class FBDialog extends JDialog
    {
        private static final String title   = "GPP Visualizer Status";
        private final JLabel    actLabel    = new JLabel();
        private final JLabel    expLabel    = new JLabel();
        private final JLabel    statusLabel = new JLabel( "Status" );
        
        public FBDialog( JFrame parent )
        {
            super( parent, title );
            setContentPane( getMainPanel() );
            pack();
        }
        
        /**
         * Creates the content pane for the dialog.
         * Uses the north (expected image),
         * center (actual image)
         * and south (status)
         * segments of a BorderLayout
         * for displaying
         * the expected image, actual image
         * and status, respectively.
         * 
         * @return  the dialog's main panel
         */
        private JPanel getMainPanel()
        {
            JPanel  panel   = new JPanel( new BorderLayout() );
            panel.add( getExpPanel(), BorderLayout.NORTH );
            panel.add( getActPanel(), BorderLayout.CENTER );
            statusLabel.setHorizontalAlignment( SwingUtilities.CENTER );
            panel.add( statusLabel, BorderLayout.SOUTH );
            
            Border  outer   =
                BorderFactory.createEmptyBorder( 3, 3, 3, 3 );
            Border  inner   = 
                BorderFactory.createLineBorder( Color.BLACK, 3); 
            Border  border  =
                BorderFactory.createCompoundBorder( outer, inner );
            panel.setBorder( border );
            return panel;
        }
        
        /**
         * Gets a panel to display <em>expLabel,"</em>
         * which in turn displays an icon
         * representing the expected image.
         * 
         * @return  panel to display expected image
         */
        private JPanel getExpPanel()
        {
            final String title = "Expected Image";
            Border  outer   = 
                BorderFactory.createEmptyBorder( 3, 3, 0, 3 );
            Border  inner   = 
                BorderFactory.createTitledBorder( title );
            Border  border  =
                BorderFactory.createCompoundBorder( outer, inner );
            JPanel  panel   = new JPanel();
            panel.setBorder( border );
            panel.add( expLabel );
            return panel;
        }
        
        /**
         * Gets a panel to display <em>actLabel,"</em>
         * which in turn displays an icon
         * representing the actual image.
         * 
         * @return  panel to display actual image
         */
        private JPanel getActPanel()
        {
            final String title = "Actual Image";
            Border  outer   = 
                BorderFactory.createEmptyBorder( 0, 3, 3, 3 );
            Border  inner   = 
                BorderFactory.createTitledBorder( title );
            Border  border  =
                BorderFactory.createCompoundBorder( outer, inner );
            JPanel  panel   = new JPanel();
            panel.setBorder( border );
            panel.add( actLabel );
            return panel;
        }
        
        /**
         * Sets the icon
         * of the actual image label
         * to the given image.
         * 
         * @param image the given image
         */
        public void showActualImage( BufferedImage image )
        {
            actLabel.setIcon( getIcon( image ) );
            pack();
        }
        
        /**
         * Sets the icon
         * of the expected image label
         * to the given image.
         * 
         * @param image the given image
         */
        public void showExpectedImage( BufferedImage image )
        {
            expLabel.setIcon( getIcon( image ) );
            pack();
        }
        
        /**
         * Sets the text
         * of the status label
         * to the given string.
         * 
         * @param image the given string
         */
        public void showStatus( String status )
        {
            statusLabel.setText( status );
        }
        
        /**
         * Creates and scales
         * an icon from a given image.
         * 
         * @param image the given image
         * 
         * @return  icon containing the scaled image
         */
        private static ImageIcon getIcon( BufferedImage image )
        {
            final double scale = .75;
            int         newWidth    = 
                (int)(image.getWidth() * scale + .5);
            int         newHeight   = 
                (int)(image.getHeight() * scale + .5);
            int         hint        = Image.SCALE_REPLICATE;
            Image       scaledImage = 
                image.getScaledInstance( newWidth, newHeight, hint );
            ImageIcon   icon        = new ImageIcon( scaledImage );
            return icon;
        }
    }
}
