package com.acmemail.judah.cartesian_plane.test_utils;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.function.DoubleSupplier;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.Border;

import com.acmemail.judah.cartesian_plane.components.Feedback;

public abstract class FBCompTA
{
    public abstract Feedback 
    getFeedbackInstance( DoubleSupplier supplier );
    
    /**
     * Master directory for all feedback data files. This will
     * be a subdirectory of the project test data files; 
     * see {@linkplain Utils#BASE_TEST_DATA_DIR}.
     * The directory should contain only subdirectories 
     * where data files for testing specific feedback
     * components are stored, for example: "Length", "Spacing",
     * "Stroke".
     */
    private static final String feedbackDir     = "Feedback";
    /** 
     * The first part of the name of the file where
     * data for a test are stored.
     */
    private static final String fileNamePrefix  = "TestData";
    /** 
     * The filename extension of the file where
     * data for a test are stored.
     */
    private static final String fileNameExt     = ".ser";
    /** 
     * Format string for formulating the names of files for storing
     * data for a test, for example "TestData0002.ser".
     */
    private static final String fileNameFmt     = "%s%04d%s";
    /** 
     * The name of the subdirectory that will be used to store
     * all the data files generated by this application. The
     * value of this field is established in the constructor.
     */
    private final String        dataSubdir;
    /** 
     * The directory corresponding to "dataSubdir". Established in
     * the constructor.
     */
    private final File          dataFileDir;
    /** 
     * Used to determine the sequence number of a data file. This
     * value is increased each time a new data file is created.
     */
    private int                 fileNameSeq     = 1;
    
    /** The minimum property value to feed to the feedback component. */
    private static double       minVal          = 1;
    /** The maximum property value to feed to the feedback component. */
    private static double       maxVal          = 500;
    
    /**
     * Contains the current property value to be applied to the feedback
     * component. This value is updated every time the Increase
     * or Decrease buttons are pushed.
     * @see #incrActionPerformed(ActionEvent)
     */
    private double              currVal     = minVal;
    /** The feedback component undergoing test. */
    private final Feedback      feedback;
    /** The dimensions of the feedback component. */
    private final Dimension     compSize    = new Dimension( 100, 25 );
    
    /**
     * Constructor;
     * creates and shows the GUI.
     */
    public FBCompTA( String subdir, Class<Feedback> subjectClass )
    {
        dataSubdir = subdir;
        dataFileDir = makeFilePath();
        feedback = getFeedbackInstance( () -> currVal );
        feedback.setPreferredSize( compSize );
        
        String  title   = "Feedback Component Test Assistant";
        JFrame  frame   = new JFrame( title );
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        JPanel  contentPane = new JPanel( new BorderLayout() );
        contentPane.add( getButtonPanel(), BorderLayout.SOUTH );
        
        frame.setContentPane( contentPane );
        frame.pack();
        frame.setLocation( 100, 100 );;
        frame.setVisible( true );
        
        makeComponentDialog( feedback );
    }
    
    /**
     * Gets a File object
     * representing the path
     * to the data file
     * that is expected
     * to be created 
     * by this application.
     * 
     * @return  
     *      File representing the data file
     *      created by this application
     */
    public File getDataFile()
    {
        String  name    = String.format( 
            fileNameFmt, 
            fileNamePrefix, 
            fileNameSeq++,
            fileNameExt
        );
        File    file    = new File( dataFileDir, name );
        return file;
    }
    
    private File makeFilePath()
    {
        String  subPath = feedbackDir + "/" + dataSubdir;
        File    path    = Utils.getTestDataDir( subPath );
        
        return path;
    }
    
    /**
     * Creates the panel
     * containing the buttons
     * for controlling
     * this application.
     * 
     * @return  the panel containing this application's control buttons
     */
    private JPanel getButtonPanel()
    {
        JButton     incr        = new JButton( "Incr" );
        JButton     decr        = new JButton( "Decr" );
        JButton     save        = new JButton( "Save" );
        JButton     exit        = new JButton( "Exit" );
        
        incr.addActionListener( this::incrActionPerformed );
        decr.addActionListener( this::decrActionPerformed );
        save.addActionListener( this::saveActionPerformed );
        exit.addActionListener( e -> System.exit( 0 ) );
        
        JPanel      panel       = new JPanel();
        BoxLayout   layout      = new BoxLayout( panel, BoxLayout.X_AXIS );
        panel.setLayout( layout );
        panel.add( incr );
        panel.add( decr );
        panel.add( save );
        panel.add( exit );
        
        return panel;
    }
    
    /**
     * Method to be invoked
     * when the Increase button 
     * is pushed.
     * The value
     * controlling the feedback component
     * is incremented,
     * and the feedback component
     * is repainted.
     * 
     * @param evt   event associated with the button push;
     *              not used.
     */
    private void incrActionPerformed( ActionEvent evt )
    {
        if ( currVal < maxVal )
        {
            ++currVal;
            feedback.repaint();
        }
    }
    
    /**
     * Method to be invoked
     * when the Decrease button 
     * is pushed.
     * The value
     * controlling the feedback component
     * is decremented,
     * and the feedback component
     * is repainted.
     * 
     * @param evt   event associated with the button push;
     *              not used.
     */
    private void decrActionPerformed( ActionEvent evt )
    {
        if ( currVal > minVal )
        {
            --currVal;
            feedback.repaint();
        }
    }
    
    /**
     * Method to be invoked
     * when the Save button
     * is pushed.
     * A detail object
     * encapsulating the configuration
     * of the feedback component
     * is created
     * and written to
     * the data file.
     * I/O errors 
     * are recorded to stderr
     * but otherwise ignored.
     * 
     * @param evt   
     *      event object generated when the save button 
     *      is pushed; not used
     */
    private void saveActionPerformed( ActionEvent evt )
    {
        BufferedImage   image   = getBufferedImage();
        FBCompTADetail  detail  = 
            new FBCompTADetail( currVal, -1, image );
        
        // Construct filename from prefix sequence number and extension
        File    dataFile    = getDataFile();
        try ( 
            FileOutputStream fileStream = 
                new FileOutputStream( dataFile );
            ObjectOutputStream outStream = 
                new ObjectOutputStream( fileStream );
        )
        {
            outStream.writeObject( detail );
            String  dest    = dataFile.getAbsolutePath();
            System.out.println( "Wrote object " + dest );
        }
        catch ( IOException exc )
        {
            exc.printStackTrace();
        }
    }
    
    /**
     * Obtains a BufferedImage
     * containing the rendered
     * feedback component.
     * 
     * @return 
     *      a BufferedImage containing 
     *      the rendered feedback component
     */
    private BufferedImage getBufferedImage()
    {
        int             type        = BufferedImage.TYPE_INT_RGB;
        BufferedImage   image       = 
            new BufferedImage( compSize.width, compSize.height, type );
        Graphics        graphics    = image.createGraphics(); 
        feedback.paintComponent( graphics );
        return image;
    }
    
    /**
     * Creates a dialog
     * that displays
     * the rendered
     * feedback component.
     * 
     * @param component 
     *      the feedback component to be displayed in the dialog
     */
    private void makeComponentDialog( JComponent component )
    {
        JDialog   compDialog    = new JDialog();
        String      title       = "Component Display";
        compDialog.setTitle( title );
        
        Border  border      =
            BorderFactory.createEmptyBorder( 10, 10, 10, 10 );
        JPanel  contentPane = new JPanel();
        contentPane.setBorder( border );
        contentPane.add( component );
        compDialog.setContentPane( contentPane );
        compDialog.setLocation( 200, 200 );
        compDialog.pack();
        compDialog.setVisible( true );
    }
}
