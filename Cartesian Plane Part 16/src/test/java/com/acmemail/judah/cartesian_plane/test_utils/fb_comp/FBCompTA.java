package com.acmemail.judah.cartesian_plane.test_utils.fb_comp;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.function.DoubleSupplier;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.border.Border;

import com.acmemail.judah.cartesian_plane.components.Feedback;
import com.acmemail.judah.cartesian_plane.test_utils.Utils;

/**
 * Application to generate test data
 * for one of the feedback components,
 * for example LengthFeedback, SpacingFeedback
 * and StrokeFeedback.
 * A subclass provides
 * the name of the subdirectory
 * in which test data files
 * are to be stored.
 * If necessary,
 * the subdirectory will be created
 * as a child of 
 * Utils.BASE_TEST_DATA_DIR/Feedback.
 * Test data file names
 * begin with "TestData",
 * followed by a sequence number
 * followed by the extension ".ser".
 * 
 * @author Jack Straub
 */
public abstract class FBCompTA
{
    public abstract Feedback 
        getFeedbackInstance( DoubleSupplier supplier );

    /** The dimensions of the feedback component. */
    public static final Dimension     COMP_SIZE    = new Dimension( 100, 25 );
    /**
     * Master directory for all feedback data files. This will
     * be a subdirectory of the project test data files; 
     * see {@linkplain Utils#BASE_TEST_DATA_DIR}.
     * The directory should contain only subdirectories 
     * where data files for testing specific feedback
     * components are stored, for example: "Length", "Spacing",
     * "Stroke".
     */
    public static final String  FEEDBACK_DIR    = "Feedback";
    /** 
     * The first part of the name of the file where
     * data for a test are stored.
     */
    private static final String fileNamePrefix  = "TestData";
    /** 
     * The filename extension of the file where
     * data for a test are stored.
     */
    private static final String fileNameExt     = ".ser";
    /** 
     * Format string for formulating the names of files for storing
     * data for a test, for example "TestData0002.ser".
     */
    private static final String fileNameFmt     = "%s%04d%s";
    /** 
     * The name of the subdirectory that will be used to store
     * all the data files generated by this application. The
     * value of this field is established in the constructor.
     */
    private final String        dataSubdir;
    /** 
     * The directory corresponding to "dataSubdir". Established in
     * the constructor.
     */
    private final File          dataFileDir;
    /** 
     * Used to determine the sequence number of a data file. This
     * value is increased each time a new data file is created.
     */
    private int                 fileNameSeq     = 1;
    /** The current data file. */
    private File                dataFile;
    
    /** The minimum property value to feed to the feedback component. */
    private static double       minVal          = 1;
    /** The maximum property value to feed to the feedback component. */
    private static double       maxVal          = 500;
    /** Model encapsulated by the value spinner. */
    private final SpinnerNumberModel    valModel    = 
        new SpinnerNumberModel( 10, minVal, maxVal, 1 );
    /** Spinner that controls the value of the property under test. */
    private final JSpinner              valSpinner  = 
        new JSpinner( valModel );
    
    /** The minimum weight to feed to the feedback component. */
    private static double       minWeight       = 1;
    /** The maximum weight to feed to the feedback component. */
    private static double       maxWeight       = 500;
    /** Model encapsulated by the weight spinner. */
    private final SpinnerNumberModel    weightModel  = 
        new SpinnerNumberModel( 1, minWeight, maxWeight, 1 );
    /** Spinner that controls the weight of the property under test. */
    private final JSpinner              weightSpinner = 
        new JSpinner( weightModel );
    
    /** 
     * Component to display the name of the directory
     * in which test data is stored.
     */
    private final JLabel    dirDescriptor       = new JLabel();
    /**
     * Component to display the name of the file
     * in which test data is to be stored.
     */
    private final JLabel    fileDescriptor      = new JLabel();
    /**
     * Component to display the name of the class
     * for which test data is being generated.
     */
    private final JLabel    classDescriptor     = new JLabel();
    /**
     * Component to display the property value
     * assigned to the component to be tested.
     */
    private final JLabel    valueDescriptor     = new JLabel();
    /**
     * Component to display the weight
     * assigned to the component to be tested.
     */
    private final JLabel    weightDescriptor    = new JLabel();

    /** The feedback component undergoing test. */
    private final Feedback      feedback;
    
    /**
     * Constructor;
     * creates and shows the GUI.
     * Performs all initialization,
     * including establish the
     * name and location of 
     * the first test data file;
     * note that the file 
     * is not created
     * until the test data
     * is saved.
     */
    public FBCompTA( String subdir )
    {
        dataSubdir = subdir;
        dataFileDir = makeFilePath();
        feedback = getFeedbackInstance( () -> 
            valModel.getNumber().doubleValue()
        );
        feedback.setPreferredSize( COMP_SIZE );
        
        String  title   = "Feedback Component Test Assistant";
        JFrame  frame   = new JFrame( title );
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        JPanel  contentPane = new JPanel( new BorderLayout() );
        contentPane.add( getControlPanel(), BorderLayout.SOUTH );
        contentPane.add( getDescriptorPanel(), BorderLayout.CENTER );
        
        frame.setContentPane( contentPane );
        frame.pack();
        frame.setLocation( 100, 100 );;
        frame.setVisible( true );
        
        makeComponentDialog( frame, feedback );
        getDataFile();
    }
    
    /**
     * Gets a File object
     * representing the path
     * to the data file
     * that is expected
     * to be created 
     * by this application.
     * Updates the name of the file
     * displayed in the GUI.
     * 
     * @return  
     *      File representing the data file
     *      created by this application
     */
    public void getDataFile()
    {
        String  name    = String.format( 
            fileNameFmt, 
            fileNamePrefix, 
            fileNameSeq++,
            fileNameExt
        );
        dataFile = new File( dataFileDir, name );
        fileDescriptor.setText( dataFile.getName() );
    }
    
    /**
     * Determines the path
     * to the directory
     * in which test data files
     * are to be stored.
     * 
     * @return  
     *      the path to the directory in which test data files
     *      are to be stored
     */
    private File makeFilePath()
    {
        String  subPath = FEEDBACK_DIR + "/" + dataSubdir;
        File    path    = Utils.getTestDataDir( subPath );
        
        return path;
    }
    
    /**
     * Creates the panel
     * containing the components
     * for controlling
     * this application.
     * 
     * @return  the panel containing this application's control buttons
     */
    private JPanel getControlPanel()
    {
        JButton     save        = new JButton( "Save" );
        JButton     exit        = new JButton( "Exit" );
        
        valSpinner.addChangeListener( e -> feedback.repaint() );
        valSpinner.addChangeListener( e -> {
            float   val = valModel.getNumber().floatValue();
            valueDescriptor.setText( "" + val );
        });
        
        float       currWeight  = feedback.getWeight();
        weightSpinner.addChangeListener( e -> {
            float   weight  = weightModel.getNumber().floatValue();
            weightDescriptor.setText( "" + weight );
            feedback.setWeight( weight );
            feedback.repaint();
        });
        if ( currWeight < 0 )
            weightSpinner.setEnabled( false );
        else
            weightModel.setValue( currWeight );
        save.addActionListener( this::saveActionPerformed );
        exit.addActionListener( e -> System.exit( 0 ) );
        
        Dimension   spacing     = new Dimension( 3, 0 );
        JPanel      panel       = new JPanel();
        BoxLayout   layout      = new BoxLayout( panel, BoxLayout.X_AXIS );
        panel.setLayout( layout );
        panel.add( new JLabel( "Value " ) );
        panel.add( valSpinner );
        panel.add( Box.createRigidArea( spacing ) );
        panel.add( new JLabel( "Weight " ) );
        panel.add( weightSpinner );
        panel.add( Box.createRigidArea( spacing ) );
        panel.add( save );
        panel.add( Box.createRigidArea( spacing ) );
        panel.add( exit );
        
        int     outerMargin = 10;
        Border  outer       =
            BorderFactory.createEmptyBorder( 
                outerMargin, 
                outerMargin, 
                outerMargin, 
                outerMargin
            );
        
        int     innerMargin = 5;
        Border  inner       =
            BorderFactory.createEmptyBorder( 
                innerMargin, 
                innerMargin, 
                innerMargin, 
                innerMargin
            );
        Border  line        =
            BorderFactory.createLineBorder( Color.BLACK, 1 );
        Border  compound    = 
            BorderFactory.createCompoundBorder( outer, line );
        Border  border      =
            BorderFactory.createCompoundBorder( compound, inner );
        panel.setBorder( border );
        
        return panel;
    }
    
    /**
     * Gets the panel
     * in which current parameters
     * are displayed.
     * This includes such data
     * as the location of the current data file,
     * and the value and weight
     * currently assigned to 
     * the test component.
     * 
     * @return  the panel in which current parameters are displayed
     */
    private JPanel getDescriptorPanel()
    {
        String  simpleName  = feedback.getClass().getSimpleName();
        classDescriptor.setText( simpleName );
        float   numValue    = valModel.getNumber().floatValue();
        valueDescriptor.setText( "" + numValue );
        float   weightValue = feedback.getWeight();
        weightDescriptor.setText( "" + weightValue );
        String  dirName     = dataFileDir.getPath();
        dirDescriptor.setText( dirName );
        
        JPanel      classPanel  = 
            getDescriptorPanel( "Class: ", classDescriptor );
        JPanel      valuePanel  = 
            getDescriptorPanel( "Value:", valueDescriptor );
        JPanel      weightPanel = 
            getDescriptorPanel( "Weight: ", weightDescriptor );
        JPanel      dirPanel    =
            getDescriptorPanel( "Data Dir: ", dirDescriptor );
        JPanel      filePanel   =
            getDescriptorPanel( "Data File: ", fileDescriptor );
        
        JPanel      masterPanel = new JPanel();
        BoxLayout   layout      = 
            new BoxLayout( masterPanel, BoxLayout.Y_AXIS );
        masterPanel.setLayout( layout );
        masterPanel.add( classPanel );
        masterPanel.add( valuePanel );
        masterPanel.add( weightPanel );
        masterPanel.add( dirPanel );
        masterPanel.add( filePanel );
        return masterPanel;
    }
    
    /**
     * Helper method for {@linkplain #getDescriptorPanel()}.
     * Formulates a panel 
     * containing the label of a descriptor
     * (e.g. "Data File: ")
     * and the associated descriptor
     * (e.g. fileDescriptor).
     * 
     * @param idStr text to display in the label
     * @param right descriptor to display
     * 
     * @return
     *      panel containing the label of a descriptor
     *      and the associated descriptor
     */
    private JPanel getDescriptorPanel( String idStr, JLabel right )
    {
        JPanel      panel   = new JPanel();
        BoxLayout   layout  = new BoxLayout( panel, BoxLayout.X_AXIS );
        panel.setLayout( layout );
        
        int     margin  = 3;
        Border  border  = 
            BorderFactory.createEmptyBorder( 
                margin,
                margin,
                margin, 
                margin
            );
        panel.setBorder( border );
        
        JLabel  label   = new JLabel( idStr, SwingConstants.RIGHT );
        panel.add( label );
        panel.add( right );
        
        return panel;
    }
    
    /**
     * Method to be invoked
     * when the Save button
     * is pushed.
     * A detail object
     * encapsulating the configuration
     * of the feedback component
     * is created
     * and written to
     * the data file.
     * I/O errors 
     * are recorded to stderr
     * but otherwise ignored.
     * 
     * @param evt   
     *      event object generated when the save button 
     *      is pushed; not used
     */
    private void saveActionPerformed( ActionEvent evt )
    {
        BufferedImage   image   = getBufferedImage();
        float           currVal = valModel.getNumber().floatValue();
        FBCompTADetail  detail  = 
            new FBCompTADetail( currVal, feedback.getWeight(), image );
        
        try ( 
            FileOutputStream fileStream = 
                new FileOutputStream( dataFile );
            ObjectOutputStream outStream = 
                new ObjectOutputStream( fileStream );
        )
        {
            outStream.writeObject( detail );
            String  dest    = dataFile.getAbsolutePath();
            System.out.println( "Wrote object " + dest );
        }
        catch ( IOException exc )
        {
            exc.printStackTrace();
            fileDescriptor.setText( "Error: " + exc.getMessage() );
        }
        
        // Set up the next data file
        getDataFile();
    }
    
    /**
     * Obtains a BufferedImage
     * containing the rendered
     * feedback component.
     * 
     * @return 
     *      a BufferedImage containing 
     *      the rendered feedback component
     */
    private BufferedImage getBufferedImage()
    {
        int             type        = BufferedImage.TYPE_INT_RGB;
        BufferedImage   image       = 
            new BufferedImage( COMP_SIZE.width, COMP_SIZE.height, type );
        Graphics        graphics    = image.createGraphics(); 
        feedback.paintComponent( graphics );
        return image;
    }
    
    /**
     * Creates a dialog
     * that displays
     * the rendered
     * feedback component.
     * 
     * @param component 
     *      the feedback component to be displayed in the dialog
     */
    private void makeComponentDialog( JFrame frame, JComponent component )
    {
        String      title       = "Component Display";
        JDialog     compDialog  = new JDialog( frame, title );
        
        Border  border      =
            BorderFactory.createEmptyBorder( 10, 10, 10, 10 );
        JPanel  contentPane = new JPanel();
        contentPane.setBorder( border );
        contentPane.add( component );
        compDialog.setContentPane( contentPane );
        
        compDialog.pack();
        
        int         xco     = frame.getX() + frame.getWidth() + 10;
        int         yco     = 
            frame.getY() 
            + frame.getHeight() / 2 
            - compDialog.getHeight() / 2;
        compDialog.setLocation( xco, yco );
        compDialog.setVisible( true );
    }
}
