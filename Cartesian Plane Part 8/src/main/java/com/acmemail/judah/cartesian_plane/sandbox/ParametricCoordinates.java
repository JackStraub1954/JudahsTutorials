package com.acmemail.judah.cartesian_plane.sandbox;

import java.awt.geom.Point2D;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.DoubleFunction;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

/**
 * An instance of this class
 * is an iterator that
 * produces a sequence of x-/y- coordinates
 * generated by a parametric function
 * of one parameter.
 * The user provides the range of values
 * for the parameter,
 * and a functional interface
 * to apply the parameter
 * and produce a Point2D object.
 * 
 * @author Jack Straub
 */
public class ParametricCoordinates implements Iterable<Point2D>
{
    /**
     * Functional interface to consume a double parameter
     * and produce a two-valued result.
     */
    private final DoubleFunction<Point2D>   funk;
    /** 
     * The first value of the range 
     * to be traversed by the parameter, inclusive. 
     */
    private final double    first;
    /** 
     * The last value of the range 
     * to be traversed by the parameter, inclusive. 
     */
    private final double    last;
    /** 
     * The amount that a parameter value 
     * is to be incremented in order
     * to produce the next value
     * in the sequence.
     */
    private final double    incr;
    
    /**
     * Constructor.
     * Establishes the range of the parameter
     * and the function to evaluate the parameter 
     * and produce the x/y result.
     * 
     * @param funk      function to evaluate the parameter
     *                  and produce a result
     * @param first     the first value of the range to be traversed
     *                  by the parameter, inclusive
     * @param last      the last value of the range to be traversed
     *                  by the parameter, inclusive
     * @param incr      the incremental value to be applied to 
     *                  to a parameter value to produce the next
     *                  parameter value
     */
    public ParametricCoordinates(
        DoubleFunction<Point2D> funk, 
        double first, 
        double last, 
        double incr 
    )
    {
        this.funk = funk;
        this.first = first;
        this.last = last;
        this.incr = incr;
    }
    
    /**
     * Returns a stream consisting of
     * the sequence of values
     * encapsulated by this object.
     * 
     * @return  stream consisting of the sequence of values
     *          encapsulated by this object
     */
    public Stream<Point2D> stream()
    {
        Stream<Point2D> stream  =
            StreamSupport.stream( this.spliterator(), false );
        return stream;
    }
    
    @Override
    public Iterator<Point2D> iterator()
    {
        return new Point2DIterator();
    }

    /**
     * This class provides the iterator
     * necessary to produce the sequence 
     * of two-valued results 
     * encapsulated by the enclosing class.
     * 
     * @author Jack Straub
     */
    private class Point2DIterator implements Iterator<Point2D>
    {
        /** "Next" value in the encapsulated sequence. */
        private double  control = first;
        
        @Override
        public boolean hasNext()
        {
            return control <= last;
        }
        
        @Override
        public Point2D next()
        {
            if ( control > last )
            {
                throw new NoSuchElementException();
            }
            Point2D point   = funk.apply( control );
            control += incr;
            return point;
        }   
    }
}
